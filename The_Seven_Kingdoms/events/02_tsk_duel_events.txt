# TSK Combat Duel Events

namespace = TSK_C_DE

# Flags
# clr_character_flag = tsk_duel_flee_attempt_success
# clr_character_flag = tsk_duel_flee_attempt
# clr_character_flag = tsk_duel_draw
# clr_character_flag = tsk_duel_lost
# clr_character_flag = tsk_duel_death

#############

# 'perp' and 'victim'

# 'perp' recieves an event at random, meeting criteria.
# event is hidden, but chooses a 'victim' and pings.

# 'victim' recieves the event, and chooses between fight or flight.
# decision is pinged to 'perp'

# 'perp' recieves the event and, with randomisation, it decides if they flee or fight.
# results are decided in this event. (victim dies, perp dies)

# 'victim' recieves event with results. silently pings 'perp' with a result event.

# finish event chain

##############

# Pick the Target (Victim), decide results
# duel_initiator
character_event = {
    id = TSK_C_DE.1
    desc = EVTDESC_TSK_C_DE.1
	picture = GFX_evt_death
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
    trigger = {
        OR = {
            is_combat_trained = yes # Is a capable fighter, and therefore would be at the fore.
            trait = experimenter # Leadering from the front, regardless of skill
        }
        NOT = {
            trait = craven
        }
        ai = no # For now, may allow AI to initiate duels.
    }
    
    # In case we have any leftover flags, ie due to someone dying before the chain can finish.
    immediate = {
        clear_event_target = duel_opponent
        
        clr_character_flag = tsk_duel_flee_attempt_success
        clr_character_flag = tsk_duel_flee_attempt
        clr_character_flag = tsk_duel_draw
        clr_character_flag = tsk_duel_lost
        clr_character_flag = tsk_duel_death
        FROM = {
            clr_character_flag = tsk_duel_flee_attempt_success
            clr_character_flag = tsk_duel_flee_attempt
            clr_character_flag = tsk_duel_draw
            clr_character_flag = tsk_duel_lost
            clr_character_flag = tsk_duel_death
        }
        
        # FROM is the opposing commander, centre flank
        FROM = {
            save_event_target_as = duel_opponent
        }
    }
    
    option = {
        name = EVTOPTA_TSK_C_DE.1
        
        FROM = { character_event = { id = TSK_C_DE.2 } }
    }
    option = {
        name = EVTOPTB_TSK_C_DE.1
        
        random_list = {
            70 = {
                # Nothing
            }
            30 = {
                add_trait = craven
            }
        }
    }
}

# Victim is chosen, recieves event and chooses fight or flight.
# duel_opponent
character_event = {
    id = TSK_C_DE.2
    desc = EVTDESC_TSK_C_DE.2
	picture = GFX_evt_death
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
    
    trigger = {
        is_alive = yes
    }
    
    option = {
        name = EVTOPTA_TSK_C_DE.2
        
        if = {
            limit = {
                NOT = { trait = brave }
            }
            random_list = {
                20 = {
                
                }
                80 = {
                    add_trait = brave
                }
            }
        }
        
        FROM = { character_event = { id = TSK_C_DE.3 } }
    }
    
    option = {
        name = EVTOPTB_TSK_C_DE.2
        
        random_list = {
            50 = {
                # Nothing
            }
            50 = {
                add_trait = craven # More obvious, the lord who gave chase may talk of your cowardice, or your own men may see it.
            }
        }
        
        # You either succeed or fail, 50/50
        random_list = {
            50 = {
                set_character_flag = tsk_duel_flee_attempt
            }
            50 = {
                set_character_flag = tsk_duel_flee_attempt_success
            }
        }
        
        FROM = { character_event = { id = TSK_C_DE.3 } }
    }
}

# Perp recives event. Description changes based on: fight, flight or failed flight.
# results are decided based on those three.
# duel_initiator
character_event = {
    id = TSK_C_DE.3
    desc = EVTDESC_TSK_C_DE.3
	picture = GFX_evt_death
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
    trigger = {
        is_alive = yes
    }
    
    # Flees
    desc = {
		text = EVTDESC_A_TSK_C_DE.3
		trigger = {
			FROM = { has_character_flag = tsk_duel_flee_attempt_success }
		} 
	}
    
    # Tried to Flee, Fail
    desc = {
		text = EVTDESC_B_TSK_C_DE.3
		trigger = {
            FROM = { has_character_flag = tsk_duel_flee_attempt }
        }
	}
    
    # Fallback
    desc = {
		text = EVTDESC_C_TSK_C_DE.3
        trigger = {
            FROM = {
                NOR = {
                    has_character_flag = tsk_duel_flee_attempt_success
                    has_character_flag = tsk_duel_flee_attempt
                }
            }
        }
	}
    
    option = {
        name = EVTOPTA_TSK_C_DE.3
        
        name = {
            text = EVTOPTA_TSK_C_DE.3
            trigger = {
                FROM = { has_character_flag = tsk_duel_flee_attempt_success }
            }
        }
        name = {
            text = EVTOPTB_TSK_C_DE.3
            trigger = {
                FROM = { NOT = { has_character_flag = tsk_duel_flee_attempt_success } }
            }
        }
        
        # Fail to flee or Engage
        if = {
            limit = {
                FROM = { NOT = { has_character_flag = tsk_duel_flee_attempt_success } }
            }
            
            FROM = { character_event = { id = TSK_C_DE.4 } }
        }
        # Successfully flee
        if = {
            limit = {
                FROM = { has_character_flag = tsk_duel_flee_attempt_success }
            }
            
            # End, no event
        }
    }
}

# 'victim' recieves results, immediately informs perp
# duel_opponent
character_event = {
    id = TSK_C_DE.4
    desc = EVTDESC_TSK_C_DE.4
	picture = GFX_evt_death
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
    trigger = {
        is_alive = yes
    }
    
    immediate = {    
        duel_combat_results_skill_effect = yes
    }
    
    desc = {
        text = EVTDESC_A_TSK_C_DE.4
        trigger = { is_victorious_opponent_dead = yes }
    }
    desc = {
        text = EVTDESC_B_TSK_C_DE.4
        trigger = { is_victorious_untouched_opponent_wounded = yes }
    }

    desc = {
        text = EVTDESC_C_TSK_C_DE.4
        trigger = { is_draw_untouched_opponent_untouched = yes }
    }
    desc = {
        text = EVTDESC_D_TSK_C_DE.4
        trigger = { is_draw_untouched_opponent_wounded = yes }
    }
    desc = {
        text = EVTDESC_E_TSK_C_DE.4
        trigger = { is_draw_wounded_opponent_untouched = yes }
    }
    desc = {
        text = EVTDESC_F_TSK_C_DE.4
        trigger = { is_draw_wounded_opponent_wounded = yes }
    }
    desc = {
        text = EVTDESC_G_TSK_C_DE.4
        trigger = { is_draw_untouched_opponent_dead = yes }
    }
    desc = {
        text = EVTDESC_H_TSK_C_DE.4
        trigger = { is_draw_wounded_opponent_dead = yes }
    }

    desc = {
        text = EVTDESC_I_TSK_C_DE.4
        trigger = { is_defeat_wounded_opponent_untouched = yes }
    }
    desc = {
        text = EVTDESC_J_TSK_C_DE.4
        trigger = { is_defeat_dead = yes }
    }
    
    option = {
        name = {
            text = EVTOPTA_TSK_C_DE.5
            trigger = { NOT = { has_character_flag = tsk_duel_death } }
        }

        name = {
            text = EVTOPTC_TSK_C_DE.4
            trigger = { has_character_flag = tsk_duel_death }
        }
        
        ############################
        
        victim_duel_determine_effect = yes # Uses flags to assign effect
        
        if = {
            limit = {
                has_character_flag = tsk_duel_death
            }
            death = {
                death_reason = death_duel
                killer = FROM
            }
        }
        
        ###
        
        FROM = { character_event = { id = TSK_C_DE.5 } }
    }
}

# 'perp' informed, handle flags and/or damage
# duel_initiator
character_event = {
    id = TSK_C_DE.5
    desc = EVTDESC_TSK_C_DE.5
	picture = GFX_evt_death
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
    trigger = {
        is_alive = yes
    }
    
    immediate = {
        # Results calculated in the last event
    }
    
    desc = {
        text = EVTDESC_A_TSK_C_DE.4
        trigger = { is_victorious_opponent_dead = yes }
    }
    desc = {
        text = EVTDESC_B_TSK_C_DE.4
        trigger = { is_victorious_untouched_opponent_wounded = yes }
    }

    desc = {
        text = EVTDESC_C_TSK_C_DE.4
        trigger = { is_draw_untouched_opponent_untouched = yes }
    }
    desc = {
        text = EVTDESC_D_TSK_C_DE.4
        trigger = { is_draw_untouched_opponent_wounded = yes }
    }
    desc = {
        text = EVTDESC_E_TSK_C_DE.4
        trigger = { is_draw_wounded_opponent_untouched = yes }
    }
    desc = {
        text = EVTDESC_F_TSK_C_DE.4
        trigger = { is_draw_wounded_opponent_wounded = yes }
    }
    desc = {
        text = EVTDESC_G_TSK_C_DE.4
        trigger = { is_draw_untouched_opponent_dead = yes }
    }
    desc = {
        text = EVTDESC_H_TSK_C_DE.4
        trigger = { is_draw_wounded_opponent_dead = yes }
    }

    desc = {
        text = EVTDESC_I_TSK_C_DE.4
        trigger = { is_defeat_wounded_opponent_untouched = yes }
    }
    desc = {
        text = EVTDESC_J_TSK_C_DE.4
        trigger = { is_defeat_dead = yes }
    }
    
    option = {
        name = {
            text = EVTOPTA_TSK_C_DE.5
            trigger = {
                NOT = { has_character_flag = tsk_duel_death }
            }
        }
        name = {
            text = EVTOPTB_TSK_C_DE.5
            trigger = {
                has_character_flag = tsk_duel_death
            }
        }
        
        ############################
        
        victim_duel_determine_effect = yes # Uses flags to assign effect
        
        if = {
            limit = {
                has_character_flag = tsk_duel_death
            }
            death = {
                death_reason = death_duel
                killer = FROM
            }
        }
    }
}