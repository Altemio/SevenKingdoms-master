##########################
##### DRAGON ENGINE ######
## written by TtanRogue ##
##########################

####Basic dragon engine events 000-099 ####
#000	Initialize dragon stat calculation
#001	Initializes dragon duel counting for riders
#002	Simulates the dragon's growth
#003	Kills the dragon
#004	Decreases the infamy gained in sieges/battles when behaving peacufully
#005	Adds dragon egg to dragon to set dragon as FROM for renaming
#006	Assigns special character titles
#007	Assigns traits for dragon (rider) when rider dies

####Dragon in combat events 100-199####
#100	Use your dragon battle
#101	Use your dragon in siege
#102	Enemy gets wounded or dies in battle
#103	Enemy gets wounded or dies in siege
#104	Dislpays wounded/maimed/severely injured and killed characters in battle/siege
#107	Fired on action to open won siege menu
#105	Destroy the enemy's fortification
#106	Enemy troops decide to join you
#108	Top liege is messaged of field of fire

####Dragon flavor events 200####
#200	Face the dragon
#201	Taming successful!
#202	Taming failed!
#203	You really want to hatch?
#204	Dragon egg hatched
#205	Dragon egg transfered
#206	A wild dragon is seen in a province
#207	Kill the dragon - Choose your armor
#208	Kill the dragon - Choose your weapon
#209	Kill the dragon - You finally face the beast
#210	Kill the dragon - Displays outcome
#211	Evaluates dragon recovery from wound
#212	Dragon Recovers from Wound
#213	Dragon gets wounded
#214	Dragon recovers (maimed)

####Dragon duel events 300####
#300	Find and set up dragon riders
#301	Rider D is notified about rider A's attack
#302	Rider A spots Rider D in the air
#303	Riders are asked whether or not to join the duel
#304	Rider A and D are notified about the riders who join on their side
#305	DEBUG: Various debug infos
#306	Calculates outcome | Displays all riders and dragons
#307	Displays round outcome | Displays all riders and dragons
#308	The Wound/Maim/Kill event
#309	End of dragon duel
#310	The Wound/Maim/Kill event for rider A and D if one of them stands alone and dies

namespace = dragon


####Basic dragon engine events

#	Initialize dragon stat calculation
character_event = {
	id = dragon.0

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_dragon = yes
	}
	
	immediate = {
		# Dragon stat Calculation
		dragon_stat_calculation = yes
		dragon_trait = {
			set_immune_to_pruning = yes
		}
		
		#repeat_event = { id = dragon.0 days = 31 }
	}
}

#	Initializes dragon duel counting for riders
character_event = {
	id = dragon.1

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			trait = poor_dragon_rider
			trait = trained_dragon_rider
			trait = skilled_dragon_rider
			trait = master_dragon_rider
		}
	}
	
	immediate = {
		if = {
			limit = {
				trait = poor_dragon_rider
			}
			set_variable = { which = dragon_duel_count value = 0 }
		}
		else_if = {
			limit = {
				trait = trained_dragon_rider
			}
			set_variable = { which = dragon_duel_count value = 4 }
		}
		else_if = {
			limit = {
				trait = skilled_dragon_rider
			}
			set_variable = { which = dragon_duel_count value = 8 }
		}
		else_if = {
			limit = {
				trait = master_dragon_rider
			}
			set_variable = { which = dragon_duel_count value = 13 }
		}
	}
}

#	Simulates the dragon's growth
character_event = {
	id = dragon.2

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_dragon = yes
	}
	
	immediate = {
		change_martial = 1
		random = {
			chance = 25
			modifier = {
				factor = 2
				trait = dr_strong
			}
			change_martial = 1
		}
	}
}

#	Kills the dragon
character_event = {
	id = dragon.3

	#is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_dragon = yes
		age = 110
	}
	
	mean_time_to_happen = { days = 1 }
	
	option = {
		random = {
			chance = 30
			modifier = {
				factor = 0
				age < 110
			}
			modifier = {
				factor = 1.2
				age < 120
				age >= 110
			}
			modifier = {
				factor = 1.4
				age < 130
				age >= 120
			}
			modifier = {
				factor = 1.6
				age < 140
				age >= 130
			}
			modifier = {
				factor = 1.8
				age < 150
				age >= 140
			}
			modifier = {
				factor = 2.2
				age < 160
				age >= 150
			}
			death = { death_reason = death_natural } 
		}
	}
}

#	Decreases the infamy gained in sieges/battles when behaving peacefully
character_event = {
	id = dragon.4

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_dragon_rider = yes
		NOT = { has_character_modifier = used_dragon_in_battle_siege_hidden }
	}
	
	immediate = {
		change_infamy = {
			value = -2
			localisation = dragon_infamy
		}
	}
}

#	Adds dragon egg to dragon to set dragon as FROM for renaming
character_event = {
	id = dragon.5
	
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_dragon = yes
	}
	
	immediate = {
		random_list = {
			20 = { add_artifact = black_dragon_egg }
			20 = { add_artifact = blue_dragon_egg }
			20 = { add_artifact = green_dragon_egg }
			20 = { add_artifact = grey_dragon_egg }
			20 = { add_artifact = red_dragon_egg }
			20 = { add_artifact = violet_dragon_egg }
			20 = { add_artifact = white_dragon_egg }
			20 = { add_artifact = yellow_dragon_egg }
		}
		new_artifact = {
			save_event_target_as = created_dragon_egg
			set_name = "[From.GetFirstName]'s egg"
			set_artifact_original_owner = ROOT
		}
		if = {
			limit = { trait = tamed_dragon }
			random_friend = {
				character_event = { id = dragon.205 }
			}
		}
	}
}

#	Assigns special character titles
character_event = {
	id = dragon.6

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_dragon_rider = yes
	}
	
	immediate = {
		if = {
			limit = { is_ruler = no }
			set_special_character_title = title_dragon_rider
		}
		else_if = {
			limit = {
				is_ruler = no
				OR = {
					trait = skilled_tactician
					trait = brilliant_strategist
					trait = knight
					trait = dragon_knight
				}
			}
			set_special_character_title = title_dragon_knight
		}
		else_if = {
			limit = { is_ruler = yes }
			if = {
				limit = { is_female = no }
				set_special_character_title = title_dragon_lord
			}
			else = {
				set_special_character_title = title_dragon_lady
			}
		}
	}
}

#	Assigns traits for dragon (rider) when rider (dragon) dies
character_event = {
	id = dragon.7

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		OR = {
			trait = dragon_rider
			trait = dragon_base_trait
		}
	}
	
	immediate = {
		if = {
			limit = { trait = dragon_rider }
			random_friend = {
				limit ={
					trait = dragon_base_trait
				}
				remove_trait = tamed_dragon
				add_trait = wild_dragon
			}
		}
		else_if = {
			limit = { trait = dragon_base_trait }
			random_friend = {
				limit = { trait = dragon_rider }
				trigger_switch = {
					on_trigger = trait
					poor_dragon_rider = {
						set_flag = is_poor_dragon_rider
						remove_trait = poor_dragon_rider
					}
					trained_dragon_rider = {
						set_flag = is_trained_dragon_rider
						remove_trait = trained_dragon_rider
					}
					skilled_dragon_rider = {
						set_flag = is_skilled_dragon_rider
						remove_trait = skilled_dragon_rider
					}
					master_dragon_rider = {
						set_flag = is_master_dragon_rider
						remove_trait = master_dragon_rider
					}
				}
			}
		}
	}
}

#	Dragon gains personality trait
character_event = {
	id = dragon.8
	
	#hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		always = no
		is_dragon = yes
	}
	
	option = {
		hidden_tooltip = { tsk_remove_non_dragon_traits = yes }
		random = {
			chance = 40
			modifier = {
				factor = 1.3
				lifestyle_traits = 0
			}
			modifier = {
				factor = 1.1
				lifestyle_traits = 1
			}
			modifier = {
				factor = 0.7
				lifestyle_traits = 2
			}
			modifier = {
				factor = 0.5
				lifestyle_traits = 3
			}
			modifier = {
				factor = 0.2
				lifestyle_traits = 4
			}
			modifier = {
				factor = 0.2
				lifestyle_traits > 4
			}
			set_flag = dragon_is_marked_for_personality_event
		}
	}
}

#	Remove non-dragon personality traits
character_event = {
	id = dragon.9
	
	hide_window = yes
	
	trigger = {
		is_dragon = yes
		tsk_has_non_dragon_traits = yes
	}
	
	option = {
		tsk_remove_non_dragon_traits = yes
	}
}

####Dragon in combat events

#	Use your dragon in battle
character_event = {
	id = dragon.100
	desc = EVTDESCdragon100
	picture = GFX_evt_imad_awan_dragon_fight_final2
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		set_your_dragon = yes #Be aware! ROOT must be the dragon's rider!
	}
	
	option = {	#Burn them all!
		name = EVTOPTAdragon100
		tooltip_info = dragon_rider
		
		any_current_enemy =  {
			top_liege = { character_event = { id = dragon.108 days = 4 } }
			any_realm_character = {
				limit = {
					in_command = yes
					prisoner = no
					NOT = { character = ROOT }
					is_dragon_rider = no
					at_location = ROOT
					#has_siege = no
				}
				character_event = { id = dragon.102 }
				opinion = { modifier = used_dragon_against_me who = ROOT years = 6 }
				troop_damage_by_dragon = yes
			}
		}
		hidden_tooltip = {
			add_character_modifier = { modifier = used_dragon_in_battle_siege_hidden duration = 970 }
		}
		
		#Dragon Rider Leveling
		dragon_rider_leveling = yes
		
		location = { add_province_modifier = { name = burnt_land months = 6 stacking = yes } }
		
		change_infamy = {
			value = 3
			localisation = dragon_infamy
		}
	}
}

#	Use your dragon in siege
character_event = {
	id = dragon.101
	desc = EVTDESCdragon101
	picture = GFX_evt_siege_of_fire
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		set_your_dragon = yes #Be aware! ROOT must be the dragon's rider!
	}
	
	option = { #Let these stones be their graves
		name = EVTOPTAdragon101
		tooltip_info = dragon_rider
		
		siege =  {
			enemy = {
				troop_damage_by_dragon = yes
			}
		}
		any_current_enemy = {
			top_liege = { character_event = { id = dragon.108 days = 4 } }
			any_courtier = {
				limit = { at_location = ROOT }
				opinion = { modifier = used_dragon_against_me who = ROOT years = 6 }
				random = {
					chance = 50
					character_event = { id = dragon.103 }
				}
			}
		}
		location = {
			random_province_holding = { 
				limit = { 
					has_siege = yes 
					ROOT = { siege = { is_attacker = yes } }
				}
				add_holding_modifier = { modifier = damaged_walls duration = 730 }
				holder_scope = { 
					opinion = { modifier = used_dragon_against_me who = ROOT years = 6 } 
				}
			}
		}
		hidden_tooltip = {
			add_character_modifier = { modifier = used_dragon_in_battle_siege_hidden duration = 970 }
		}
		
		#Dragon Rider Leveling
		dragon_rider_leveling = yes
	
		change_infamy = {
			value = 3
			localisation = dragon_infamy
		}
	}
}

#	Enemy gets wounded or dies in battle
character_event = {
	id = dragon.102
	desc = EVTDESCdragon102
	picture = GFX_evt_battle_dragon
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		random_list = {
			10 = {
			}
			30 = {	
				set_character_flag = wounded_by_dragon
			}
			15 = {
				set_character_flag = maimed_by_dragon
			}
			15 = {
				set_character_flag = severely_injured_by_dragon
			}
			30 = {
				set_character_flag = killed_by_dragon
			}
		}
	}
	
	option = {
		name = EVTOPTAdragon102
		prestige = 400
		if = {
			limit = { 
				OR = { 
					has_character_flag = wounded_by_dragon
					has_character_flag = maimed_by_dragon
					has_character_flag = severely_injured_by_dragon
					has_character_flag = killed_by_dragon
				}
			}
			FROMFROM = { character_event = { id = dragon.104 } }
		}
	}
}

#	Enemy gets wounded or dies in siege
character_event = {
	id = dragon.103
	desc = EVTDESCdragon103
	picture = GFX_evt_battle_dragon

	is_triggered_only = yes
	
	#trigger = {
	#	at_location = FROM
	#}
	
	immediate = {
		random_list = {
			10 = {
			}
			20 = {	
				set_character_flag = wounded_by_dragon
			}
			20 = {
				set_character_flag = maimed_by_dragon
			}
			20 = {
				set_character_flag = severely_injured_by_dragon
			}
			30 = {
				set_character_flag = killed_by_dragon
			}
		}
	}
	
	option = {
		name= {
			text = EVTOPTAdragon103
			trigger = { has_character_flag = wounded_by_dragon }
		}
		name= {
			text = EVTOPTBdragon103
			trigger = { has_character_flag = maimed_by_dragon }
		}
		name= {
			text = EVTOPTCdragon103
			trigger = { has_character_flag = severely_injured_by_dragon }
		}
		name= {
			text = EVTOPTCdragon103
			trigger = { has_character_flag = killed_by_dragon }
		}
		
		if = {
			limit = {
				OR = {
					has_character_flag = wounded_by_dragon
					has_character_flag = maimed_by_dragon
					has_character_flag = severely_injured_by_dragon
					has_character_flag = killed_by_dragon
				}
			}
			FROMFROM = { character_event = { id = dragon.104 } }
		}
	}
}

#	Dislpays wounded/maimed/severely injured and killed characters in battle/siege
character_event = {
	id = dragon.104
	desc = {
		trigger = {
			in_battle = yes
		}
		text = EVTDESCAdragon104
	}
	desc = {
		trigger = {
			in_siege = yes
		}
		text = EVTDESCBdragon104
	}
	picture = GFX_evt_dragon_spoils_of_war
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	option = {
		name = EVTOPTAdragon104
		
		FROM = {
			if = { 
				limit = { has_character_flag = wounded_by_dragon }
				add_trait = wounded
				clr_character_flag = wounded_by_dragon
			}
			if = { 
				limit = { has_character_flag = maimed_by_dragon }
				add_trait = maimed
				clr_character_flag = maimed_by_dragon
			}
			if = { 
				limit = { has_character_flag = severely_injured_by_dragon }
				add_trait = severely_injured
				add_trait = disfigured_by_dragon
				clr_character_flag = severely_injured_by_dragon
			}
			if = { 
				limit = { has_character_flag = killed_by_dragon }
				death = { death_reason = death_dragon_fire1 killer = FROM }
				clr_character_flag = killed_by_dragon
			}
		}
	}
}

#	Destroy the enemy's fortification | dragon
character_event = {
	id = dragon.105
	desc = EVTDESCdragon105
	picture = GFX_evt_burning_city_andreas_rocha
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	trigger = {
		is_dragon_rider = yes
		NOT = { 
			location = {
				random_province_holding = { 
					limit = { controlled_by = ROOT }
					has_holding_modifier = destroyed_holding
				}
			}
		}
	}
	
	immediate = {
		set_your_dragon = yes #Be aware! ROOT must be the dragon's rider!
	}
	
	# Burn the walls only
	option = {
		name = EVTOPTAdragon105
		tooltip_info = dragon_rider
		
		ai_chance = {
			factor = 30
			modifier = {
				factor = 2
				OR = {
					trait = kind
					#trait = honorable
				}
			}
			modifier = {
				factor = 0.2
				OR = {
					trait = cruel
				}
			}
		}
		
		location = {
			random_province_holding = { 
				limit = { controlled_by = ROOT }
				destroy_random_building = yes
				add_holding_modifier = { modifier = burnt_fortifications duration = 1095 }
			}
		}
	}
	
	# Burn the fort
	option = {
		name = EVTOPTBdragon105
		tooltip_info = dragon_rider
		
		ai_chance = {
			factor = 20
			modifier = {
				factor = 2
				OR = {
					trait = wroth
				}
			}
			modifier = {
				factor = 0.6
				OR = {
					trait = kind
				}
			}
		}
		
		location = {
			random_province_holding = { 
				limit = { controlled_by = ROOT }
				destroy_random_building = yes
				destroy_random_building = yes
				add_holding_modifier = { modifier = devastated_fort duration = 2190 }
			}
		}
		add_character_modifier = { modifier = used_dragon_in_battle_siege_hidden duration = 970 }
		change_infamy = {
			value = 10
			localisation = dragon_infamy
		}
		prestige = -250
	}
	
	# Give them fire
	option = {
		name = EVTOPTCdragon105
		tooltip_info = dragon_rider
		
		ai_chance = {
			factor = 10
			modifier = {
				factor = 2
				OR = {
					trait = cruel
					trait = commited_mass_killing
					trait = dishonorable
				}
			}
			modifier = {
				factor = 0.2
				OR = {
					trait = kind
				}
			}
		}
		
		custom_tooltip = {
			text = TOOLTIP_DRAGON105
			location = {
				set_province_flag = destroyed_holding
				random_province_holding = { 
					limit = { controlled_by = ROOT }
					set_variable = { which = count value = 15 }
					while = {
						limit = { check_variable = { which = count value = 1 } }    
						subtract_variable = { which = count value = 1 }
						destroy_random_building = yes
					}
				}
				random_province = {
					set_province_flag = destroyed_holding
				}
			}
		}
		location = {
			random_province_holding = { 
				limit = { controlled_by = ROOT }
				add_holding_modifier = { modifier = destroyed_holding duration = 7300 }
				holder_scope = { 
					opinion = { modifier = used_dragon_against_me who = ROOT years = 6 } 
				}
			}
		}
		add_character_modifier = { modifier = used_dragon_in_battle_siege_hidden duration = 970 }
		change_infamy = {
			value = 30
			localisation = dragon_infamy
		}
		prestige = -1000
		if = {
			limit = { NOT = { trait = commited_mass_killing } }
			add_trait = commited_mass_killing
		}
		if = {
			limit = { NOT = { trait = cruel } }
			add_trait = cruel
		}
	}
	
	# Let it go
	option = {
		name = EVTOPTDdragon105
		
		ai_chance = {
			factor = 20
			modifier = {
				factor = 2
				OR = {
					trait = honorable
					trait = kind
				}
			}
			modifier = {
				factor = 0.2
				OR = {
					trait = cruel
					trait = wroth
					trait = commited_mass_killing
				}
			}
		}
	}
}

#	Enemy troops decide to join you
character_event = {
	id = dragon.106
	desc = EVTDESCdragon106
	picture = GFX_evt_enemy_troops_pledge_fealty
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	option = {
		name = "Great!"
		
		custom_tooltip = {
			text = TOOLTIP_DRAGON106
			any_army = {
				troops = 0.15
			}	
		}
	}
}

#	Enemy troops decide to join you | FROM is the won barony and ROOT the siege leader
character_event = {
	id = dragon.107

	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		character_event = { id = dragon.105 }
		#FROM = { save_event_target_as = won_barony } Doesn't work for some reason
	}
}

#	Top liege is messaged of field of fire
character_event = {
	id = dragon.108
	desc = EVTDESCdragon108
	picture = GFX_evt_rider
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate  = {
		FROM = {
			set_your_dragon = yes
		}
	}
	
	option = {
		name = EVTOPTAdragon108
	}
}


####Dragon flavor events

#	Face the dragon
character_event = {
	id = dragon.200
	desc = EVTDESCdragon200
	picture = GFX_evt_battle_dragon_two
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		random_list = {
			40 = {
				# increased taming chance
				modifier = {
					factor = 1.5
					event_target:targetted_dragon_for_taming = { trait = dr_wounded }
				}
				modifier = {
					factor = 2.1
					event_target:targetted_dragon_for_taming = { trait = dr_maimed }
				}
				modifier = {
					factor = 1.2
					event_target:targetted_dragon_for_taming = { trait = dr_slothful }
				}
				modifier = {
					factor = 2.5
					event_target:targetted_dragon_for_taming = { trait = dr_humble }
				}
				modifier = {
					factor = 3
					event_target:targetted_dragon_for_taming = { trait = dr_friendly }
				}
				#decreased
				modifier = {
					factor = 0.6
					event_target:targetted_dragon_for_taming = { trait = dr_wroth }
				}
				modifier = {
					factor = 0.8
					event_target:targetted_dragon_for_taming = { trait = dr_proud }
				}
				modifier = {
					factor = 0.4
					NOT = { culture_group = valyrian }
				}
				modifier = {
					factor = 5
					culture_group = valyrian
				}
				set_flag = tames_dragon
			}
			60 = {
				set_flag = killed_by_dragon
			}
		}
	}
	
	option = {
		name = EVTOPTAdragon200
		tooltip_info = dragon_rider
		
		if = {
			limit = {
				has_flag = tames_dragon
			}
			custom_tooltip = {
				text = TOOLTIP_DRAGON8_A
				event_target:targetted_dragon_for_taming = {
					add_friend = ROOT
				}
				if = {
					limit = {
						has_ambition = obj_tame_a_dragon
					}
					set_flag = tamed_a_dragon
				}
				character_event = { id = dragon.201 }
			}
		}
		else_if = {
			limit = {
				has_flag = killed_by_dragon
			}
			character_event = { id = dragon.202 }
		}
	}
}

#	Taming successful!
character_event = {
	id = dragon.201
	desc = EVTDESCdragon201
	picture = GFX_evt_dragon_aff_guy
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	option = {
		name = EVTOPTAdragon201
		
		add_trait = dragon_rider
		if = {
			limit = { has_dragon_rider_flags = yes }
			trigger_switch = {
				on_trigger = has_character_flag
				is_poor_dragon_rider = {
					clr_flag = is_poor_dragon_rider
					add_trait = poor_dragon_rider
				}
				is_trained_dragon_rider = {
					clr_flag = is_trained_dragon_rider
					add_trait = trained_dragon_rider
				}
				is_skilled_dragon_rider = {
					clr_flag = is_skilled_dragon_rider
					add_trait = skilled_dragon_rider
				}
				is_master_dragon_rider = {
					clr_flag = is_master_dragon_rider
					add_trait = master_dragon_rider
				}
			}
		}
		else = {
			hidden_tooltip = {
				add_trait = poor_dragon_rider
			}
		}
		if = {
			limit = { is_ruler = no }
			set_special_character_title = title_dragon_rider
		}
		else_if = {
			limit = {
				is_ruler = no
				OR = {
					trait = skilled_tactician
					trait = brilliant_strategist
				}
			}
			set_special_character_title = title_dragon_knight
		}
		else_if = {
			limit = { is_ruler = yes }
			if = {
				limit = { is_female = no }
				set_special_character_title = title_dragon_lord
			}
			else = {
				set_special_character_title = title_dragon_lady
			}
		}
		hidden_tooltip = {
			event_target:targetted_dragon_for_taming = {
				add_trait = tamed_dragon
				remove_trait = wild_dragon
			}
		}
		change_infamy = {
			value = 10
			localisation = dragon_infamy
		}
		chronicle = { 
			entry = CHRONICLE_TAMED_DRAGON
			portrait = [targetted_dragon_for_taming.GetID]
		}
		if = {
			limit = {
				event_target:targetted_dragon_for_taming = { has_flag = is_EVT206_dragon }
			}
			custom_tooltip = {
				name = RENAME_DRAGON
				event_target:targetted_dragon_for_taming = {
					dragon_base_trait = {
						event_target:targetted_dragon_for_taming = {
							set_name = PREV
						}
					}
					prompt_name = {
						player = ROOT
						type = RENAME_CHARACTER_MESSAGE
						#culture = THIS
						culture = event_target:targetted_dragon_for_taming
					}
				}
			}
		}
	}
	
	after = {
		clr_flag = tames_dragon
	}
}

#	Taming failed!
character_event = {
	id = dragon.202
	desc = EVTDESCdragon202
	picture = GFX_evt_dragon_knight_duel
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	option = {
		name = EVTOPTAdragon202
		chronicle = { 
			entry = CHRONICLE_DRAGON_TAMING_FAILED
			portrait = [targetted_dragon_for_taming.GetID]
		}
		custom_tooltip = {
			text = TOOLTIP_DRAGON200_B
			death = { death_reason = death_dragon_taming killer = event_target:targetted_dragon_for_taming }
		}
	}
}

#	You really want to hatch?
character_event = {
	id = dragon.203
	desc = EVTDESCdragon203 
	picture = GFX_evt_dragon_eggs_chest
	
	picture = { #	Black dragon egg
		trigger = { event_target:targetted_egg = { artifact_type = black_dragon_egg } }
		picture = GFX_evt_blue_dragon_egg_bg	
	}
	picture = { #	Blue dragon egg
		trigger = { event_target:targetted_egg = { artifact_type = blue_dragon_egg } }
		picture = GFX_evt_black_dragon_egg_bg	
	}
	picture = { #	Green dragon egg
		trigger = { event_target:targetted_egg = { artifact_type = green_dragon_egg } }
		picture = GFX_evt_green_dragon_egg_bg	
	}
	picture = { #	Red dragon egg
		trigger = { event_target:targetted_egg = { artifact_type = red_dragon_egg } }
		picture = GFX_evt_red_dragon_egg_bg	
	}
	picture = { #	White dragon egg
		trigger = { event_target:targetted_egg = { artifact_type = white_dragon_egg } }
		picture = GFX_evt_white_dragon_egg_bg	
	}
	
	is_triggered_only = yes
	
	option = { 
		name = EVTOPTAdragon203
		
		character_event = { id = dragon.204 }
	}
	
	option = { 
		name = EVTOPTBdragon203
	}
}

#	Dragon egg hatched
character_event = {
	id = dragon.204
	desc = EVTDESCdragon204
	picture = GFX_evt_dragon_egg_in_fire
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		random_artifact = {
			limit = {
				is_artifact_equipped = yes
				ROOT_artifact_type_is_dragon_egg = yes
			}
			set_artifact_flag = targetted_dragon_egg #Added for ambition
			save_event_target_as = dragon_egg
		}
		create_character = {
			random_traits = no
			attributes = {
				diplomacy = 0
				martial = 0
				stewardship = 0
				intrigue = 0
				learning = 0
			}
			dynasty = NONE
			religion = dragon_religion
			culture = dragon_culture
			female = no
			age = 0
		}
		event_target:dragon_egg = {
			original_artifact_owner = {
				new_character = {
					set_flag = is_hatchling
					save_event_target_as = hatchling
					add_trait = wild_dragon
					tsk_new_dragons_startup = yes
					clr_flag = is_hatchling
					set_father = PREV
				}
			}
		}
		
		clear_event_target = dragon_egg
		hidden_tooltip = {
			random_artifact = {
				limit = { is_artifact_equipped = yes }
				clr_artifact_flag = targetted_dragon_egg #Added for ambition
				
				trigger_switch = {
					on_trigger = artifact_type
					black_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon1 }
								1 = { add_trait = dragon2 }
								1 = { add_trait = dragon6 }
							}
						}
						artifact_owner = { destroy_artifact = black_dragon_egg }
					}
					blue_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon13 }
								1 = { add_trait = dragon15 } # Turquoise
								1 = { add_trait = dragon17 } # Turquoise
							}
						}
						artifact_owner = { destroy_artifact = blue_dragon_egg }
					}
					green_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon3 }
								1 = { add_trait = dragon9 }
								1 = { add_trait = dragon11 }
							}
						}
						artifact_owner = { destroy_artifact = green_dragon_egg }
					}
					grey_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon14 }
								1 = { add_trait = dragon18 }
								1 = { add_trait = dragon24 }
								1 = { add_trait = dragon26 }
							}
						}
						artifact_owner = { destroy_artifact = grey_dragon_egg }
					}
					red_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon8 } # Dark red
								1 = { add_trait = dragon20 } # Orange
								1 = { add_trait = dragon5 }
								1 = { add_trait = dragon10 }
								1 = { add_trait = dragon21 }
							}
						}
						artifact_owner = { destroy_artifact = red_dragon_egg }
					}
					violet_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon16 }
								1 = { add_trait = dragon19 }
								1 = { add_trait = dragon27 }
							}
						}
						artifact_owner = { destroy_artifact = violet_dragon_egg }
					}
					white_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon7 }
								1 = { add_trait = dragon4 } # White-yellow
							}
						}
						artifact_owner = { destroy_artifact = white_dragon_egg }
					}
					yellow_dragon_egg = {
						event_target:hatchling = {
							random_list = {
								1 = { add_trait = dragon12 }
								1 = { add_trait = dragon22 }
								1 = { add_trait = dragon23 }
								1 = { add_trait = dragon25 }
							}
						}
						artifact_owner = { destroy_artifact = yellow_dragon_egg }
					}
				}
			}
		}
	}
	
	option = { 
		name = "Great!"
		
		change_infamy = {
			value = 2
			localisation = dragon_infamy
		}
		chronicle = { 
			entry = CHRONICLE_HATCHED_DRAGON
			portrait = [hatchling.GetID]
		}
	}
}

#	Dragon egg transfered
character_event = {
	id = dragon.205
	desc = EVTDESCdragoneggtransferred
	picture = GFX_evt_white_dragon_egg_bg
	
	picture = { #	Black dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = black_dragon_egg } }
		picture = GFX_evt_blue_dragon_egg_bg	
	}
	picture = { #	Blue dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = blue_dragon_egg } }
		picture = GFX_evt_black_dragon_egg_bg	
	}
	picture = { #	Green dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = green_dragon_egg } }
		picture = GFX_evt_green_dragon_egg_bg	
	}
	picture = { #	Grey dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = grey_dragon_egg } }
		picture = GFX_evt_grey_dragon_egg_bg	
	}
	picture = { #	Red dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = red_dragon_egg } }
		picture = GFX_evt_red_dragon_egg_bg	
	}
	picture = { #	Violet dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = violet_dragon_egg } }
		picture = GFX_evt_violet_dragon_egg_bg	
	}
	picture = { #	White dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = white_dragon_egg } }
		picture = GFX_evt_white_dragon_egg_bg	
	}
	picture = { #	Yellow dragon egg
		trigger = { event_target:created_dragon_egg = { artifact_type = yellow_dragon_egg } }
		picture = GFX_evt_yellow_dragon_egg_bg	
	}
	is_triggered_only = yes
	
	option = {
		name = "Great!"
		
		event_target:created_dragon_egg = {
			transfer_artifact = { from = FROM to = ROOT }
		}
		clear_event_target = created_dragon_egg
	}
}

#	A wild dragon is seen in a province
character_event = {
	id = dragon.206
	desc = EVTDESCdragon206
	picture = GFX_evt_dragon_lair
	#border = GFX_event_normal_frame_martial

	trigger = {
		OR = {
			capital_scope = { region = world_valyria }
			capital_scope = {
				de_jure_liege = d_dragonstone
			}
		}
		NOT = { had_global_flag = { flag = doom_fell_on_valyria days = 1825 } }
		NOT = { has_global_flag = age_of_dragons_ended }
	}
	
	mean_time_to_happen = {
		years = 200
		modifier = {
			factor = 4
			capital_scope = { de_jure_liege = d_dragonstone }
		}
		modifier = {
			factor = 3
			is_dragon_rider = yes
		}
	#	modifier = {
	#		factor = 3
	#		any_artifact = { artifact_type = dragon_egg }
	#	}
	}		
			
	immediate = {
		create_character = {
			random_traits = no
			attributes = {
				diplomacy = 0
				martial = 70
				stewardship = 0
				intrigue = 0
				learning = 0
			}
			name = "Wild Dragon"
			dynasty = NONE
			religion = dragon_religion
			culture = dragon_culture
			female = no
			age = 60
		}
		new_character = {
			tsk_new_dragons_startup = yes
			add_trait = wild_dragon
			set_flag = is_EVT206_dragon
			save_event_target_as = targetted_dragon_for_taming
			ROOT = {
				random_demesne_province = {
					limit = {
						OR = {
							region = world_valyria
							ROOT = { capital_scope = { de_jure_liege = d_dragonstone } }
						}
					}
					add_province_modifier = { name = burnt_land duration = 400 }
					set_flag = is_lair_of_dragon_@PREVPREV
					PREVPREV = {
						set_flag = lair_is_in_province_@PREVPREV
					}
				}
			}
		}
	}
	
	option = { # Kill the dragon
		name = EVTOPTAdragon206
		
		character_event = { id = dragon.207 }
	}
	
	option = { # Tame the dragon
		name = EVTOPTBdragon206
		trigger = { is_dragon_rider = no }
		
		character_event = { id = dragon.200 }
	}
	
	option = { # There is nothing I can do
		name = EVTOPTCdragon206
		
	}
	
	option = { # Kill the dragon with your dragon
		name = EVTOPTDdragon206
		tooltip_info = dragon_rider
		trigger = { trait = dragon_rider }
		
		character_event = { id = dragon.216 }
	}
}

#	Kill the dragon - Choose your armor
character_event = {
	id = dragon.207
	desc = EVTDESCdragon207
	picture = GFX_evt_armory
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
	}
	
	option = { # a shield and light armor
		name = EVTOPTAdragon207
		
		set_flag = chose_shield
	}
	
	option = { # heavy armor
		name = EVTOPTBdragon207
		
		set_flag = chose_heavy_armor
	}
	
	option = { # light armor
		name = EVTOPTCdragon207
		
		set_flag = chose_light_armor
	}
	
	option = { # I do not need protection
		name = EVTOPTDdragon207
		
		set_flag = chose_no_protection
	}
	
	after = {
		character_event = { id = dragon.208 }
	}
}

#	Kill the dragon - Choose your weapon
character_event = {
	id = dragon.208
	desc = EVTDESCdragon208
	picture = GFX_evt_armory
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
	}
	
	option = { # a short sword
		name = EVTOPTAdragon208
		
		set_flag = chose_sword
	}
	
	option = { # a Zweihänder
		name = EVTOPTBdragon208
		
		set_flag = chose_zweihander
	}
	
	option = { # a short spear
		name = EVTOPTCdragon208
		
		set_flag = chose_short_spear
	}
	
	option = { # your bare fists
		name = EVTOPTDdragon208
		
		set_flag = chose_fists
	}
	
	after = {
		character_event = { id = dragon.209 days = 2 }
	}
}

#	Kill the dragon - You finally face the beast
character_event = {
	id = dragon.209
	desc = { # Has no shield
		trigger = {
			NOT = { has_flag = chose_shield }
		}
		text = EVTDESCAdragon209
	}
	desc = { # Has shield
		trigger = {
			has_flag = chose_shield
		}
		text = EVTDESCBdragon209
	}
	picture = GFX_evt_dragon_knight_duel
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		random_list = {
			5 = {
				set_flag = kills_dragon
				modifier = {
					factor = 3
					culture_group = valyrian
				}
				modifier = {
					factor = 1.5
					trait = bright
				}
				modifier = {
					factor = 2
					trait = quick
				}
				modifier = {
					factor = 2.5
					trait = genius
				}
				modifier = {
					factor = 0.5
					trait = misguided_warrior
				}
				modifier = {
					factor = 0.7
					trait = tough_soldier
				}
				modifier = {
					factor = 1.5
					trait = skilled_tactician
				}
				modifier = {
					factor = 2
					trait = brilliant_strategist
				}
				modifier = {
					factor = 0.5
					trait = dueling_novice
				}
				modifier = {
					factor = 0.7
					trait = dueling_adept
				}
				modifier = {
					factor = 2
					trait = dueling_skilled
				}
				modifier = {
					factor = 3
					trait = dueling_expert
				}
				modifier = {
					factor = 4
					trait = dueling_master
				}
				modifier = {
					factor = 5
					trait = dueling_legend
				}
				modifier = {
					factor = 0.4
					has_flag = chose_no_protection
				}
				modifier = {
					factor = 0.3
					has_flag = chose_fists
				}
				modifier = {
					factor = 2
					has_flag = chose_shield
				}
				modifier = {
					factor = 4
					has_flag = chose_short_spear
				}
				
				modifier = {
					factor = 2
					event_target:targetted_dragon_for_taming = { martial <= 10 }
				}
				modifier = {
					factor = 1.5
					event_target:targetted_dragon_for_taming = {
						martial <= 20
						martial >= 10
					}
				}
				modifier = {
					factor = 0.8
					event_target:targetted_dragon_for_taming = {
						martial <= 30
						martial >= 20
					}
				}
				modifier = {
					factor = 0.5
					event_target:targetted_dragon_for_taming = {
						martial <= 40
						martial >= 30
					}
				}
				modifier = {
					factor = 0.2
					event_target:targetted_dragon_for_taming = { martial >= 40 }
				}
			}
			85 = {
				set_flag = killed_by_dragon
			}
		}
	}
	
	option = {
		name = EVTOPTAdragon209
		trigger = { NOT = { has_flag = chose_short_spear } }
		
		character_event = { id = dragon.210 }
	}
	
	option = {
		name = EVTOPTBdragon209
		trigger = { has_flag = chose_short_spear }
		
		character_event = { id = dragon.210 }
	}
	
	option = {
		name = EVTOPTCdragon209
		random = {
			chance = 75
			death = { death_reason = death_fled_from_dragon killer = event_target:targetted_dragon_for_taming }
		}
	}
}

#	Kill the dragon - Displays outcome
character_event = {
	id = dragon.210
	desc = {
		trigger = {
			NOT = { has_flag = chose_short_spear }
			has_flag = killed_by_dragon
		}
		text = EVTDESCA1dragon210
		picture = GFX_evt_dragon_knight_duel
	}
	desc = {
		trigger = {
			has_flag = chose_short_spear
			has_flag = killed_by_dragon
		}
		text = EVTDESCA2dragon210
		picture = GFX_evt_dragon_knight_duel
	}
	desc = {
		trigger = {
			NOT = { has_flag = chose_short_spear }
			has_flag = kills_dragon
		}
		text = EVTDESCB1dragon210
		picture = GFX_evt_dragon_slain_1
	}
	desc = {
		trigger = {
			has_flag = chose_short_spear
			has_flag = kills_dragon
		}
		text = EVTDESCB2dragon210
		picture = GFX_evt_dragon_slain_1
	}
	desc = {
		trigger = {
			has_flag = chose_dragon
			has_flag = kills_dragon
		}
		text = EVTDESCC1dragon210
		picture = GFX_evt_dragon_slain_1
	}
	desc = {
		trigger = {
			has_flag = chose_dragon
			has_flag = killed_by_dragon
		}
		text = EVTDESCC1dragon210
		picture = GFX_evt_dragon_slain_1
	}
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	option = {
		name = EVTOPTAdragon210
		trigger = { has_flag = kills_dragon }
		
		event_target:targetted_dragon_for_taming = { death = { death_reason = death_tried_to_kill_dragon killer = ROOT } }
		add_trait = dragon_slayer
		prestige = 500
	}
	
	option = {
		name = EVTOPTBdragon210
		trigger = { has_flag = killed_by_dragon }
		event_target:targetted_dragon_for_taming = {
			ROOT = {
				death = { death_reason = death_tried_to_kill_dragon killer = PREV }
			}
		}
		if = {
			limit = { has_flag = chose_dragon }
			event_target:targetted_dragon_for_taming = {
				event_target:my_dragon = { death = { death_reason = death_dragon_duel killer = PREV } }
			}
		}	
	}
	
	after = {
		clr_flag = chose_shield
		clr_flag = chose_light_armor
		clr_flag = chose_heavy_armor
		clr_flag = chose_no_protection
		clr_flag = chose_sword
		clr_flag = chose_zweihander
		clr_flag = chose_short_spear
		clr_flag = chose_fists
		clr_flag = chose_dragon
		clr_flag = kills_dragon
		clr_flag = killed_by_dragon
	}
}

#	Evaluates dragon recovery from wound
character_event = {
	id = dragon.211
	
	hide_window = yes
	
	trigger = {
		trait = dr_wounded
		NOT = { has_flag = dragon_gets_maimed }
	}

	mean_time_to_happen = {
		months = 8
		
		modifier = {
			factor = 0.7
			trait = dr_strong
		}
		modifier = {
			factor = 1.7
			trait = dr_weak
		}
		modifier = {
			factor = 1.1
			health = 8
		}
		modifier = {
			factor = 1.2
			health = 7.5
		}
		modifier = {
			factor = 1.3
			health = 7
		}
		modifier = {
			factor = 1.4
			health = 6.5
		}
	}
	
	immediate = {
		random_list = {
			60 = { # Dragon recovers
				character_event = { id = dragon.212 }
			}
			40 = { # Dragon gets Maimed
				set_flag = dragon_gets_maimed
				modifier = {
					factor = 0.7
					trait = dr_strong
				}
				modifier = {
					factor = 1.7
					trait = dr_weak
				}
				modifier = {
					factor = 1.1
					health = 8
				}
				modifier = {
					factor = 1.2
					health = 7.5
				}
				modifier = {
					factor = 1.3
					health = 7
				}
				modifier = {
					factor = 1.4
					health = 6.5
				}
			}
		}
	}
}

#	Dragon Recovers from Wound
character_event = {
	id = dragon.212
	desc = EVTDESCdragon212
	picture = GFX_evt_dragon_healed
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes

	major = yes
	major_trigger = {
		is_dragon_rider = yes
		is_friend = ROOT
	}

	mean_time_to_happen = {
		months = 8
		
		modifier = {
			factor = 0.7
			trait = dr_strong
		}
		modifier = {
			factor = 1.7
			trait = dr_weak
		}
		modifier = {
			factor = 1.1
			health = 8
		}
		modifier = {
			factor = 1.2
			health = 7.5
		}
		modifier = {
			factor = 1.3
			health = 7
		}
		modifier = {
			factor = 1.4
			health = 6.5
		}
	}
	
	option = {
		name = EVTOPTAdragon212
		
		ROOT = {
			show_scope_change = no
			remove_trait = dr_wounded
		}
	}
}

#	Dragon gets maimed
character_event = {
	id = dragon.213
	desc = EVTDESCdragon213
	picture = GFX_evt_dragon_laz_guy
	#border = GFX_event_normal_frame_martial
	
	major = yes
	major_trigger = {
		is_dragon_rider = yes
		is_friend = ROOT
	}

	trigger = {
		trait = dr_wounded
		has_flag = dragon_gets_maimed
	}

	mean_time_to_happen = {
		months = 5
		
		modifier = {
			factor = 0.7
			trait = dr_strong
		}
		modifier = {
			factor = 1.7
			trait = dr_weak
		}
		modifier = {
			factor = 1.1
			health = 8
		}
		modifier = {
			factor = 1.2
			health = 7.5
		}
		modifier = {
			factor = 1.3
			health = 7
		}
		modifier = {
			factor = 1.4
			health = 6.5
		}
	}
	
	immediate = {
		clr_flag = dragon_gets_maimed
	}
	
	option = {
		name = EVTOPTAdragon213
		
		ROOT = {
			show_scope_change = no
			add_trait = dr_maimed
		}
	}
}

#	Dragon recovers (maimed)
character_event = {
	id = dragon.214
	desc = EVTDESCdragon214
	picture = GFX_evt_dragon_healed
	#border = GFX_event_normal_frame_martial
	
	major = yes
	major_trigger = {
		is_dragon_rider = yes
		is_friend = ROOT
	}

	trigger = {
		trait = dr_maimed
	}

	mean_time_to_happen = {
		months = 18
		
		modifier = {
			factor = 0.7
			trait = dr_strong
		}
		modifier = {
			factor = 1.7
			trait = dr_weak
		}
		modifier = {
			factor = 1.1
			health = 8
		}
		modifier = {
			factor = 1.2
			health = 7.5
		}
		modifier = {
			factor = 1.3
			health = 7
		}
		modifier = {
			factor = 1.4
			health = 6.5
		}
	}
	
	option = {
		name = EVTOPTAdragon214
		
		ROOT = {
			show_scope_change = no
			remove_trait = dr_maimed
		}
	}
}

#	Dragon gains personality trait
character_event = {
	id = dragon.215
	desc = EVTDESCdragon215
	picture = GFX_evt_dragon_healed
	#border = GFX_event_normal_frame_martial
	
	major = yes
	major_trigger = {
		is_dragon_rider = yes
		is_friend = ROOT
	}
	
	trigger = {
		is_dragon = yes
		has_flag = dragon_is_marked_for_personality_event
	}
	
	mean_time_to_happen = {
		months = 1
		
		modifier = {
			factor = 0.7
			lifestyle_traits = 0
		}
		modifier = {
			lifestyle_traits = 1
		}
		modifier = {
			factor = 1.1
			lifestyle_traits = 2
		}
		modifier = {
			factor = 1.2
			lifestyle_traits = 3
		}
		modifier = {
			factor = 1.3
			lifestyle_traits = 4
		}
		modifier = {
			factor = 1.4
			lifestyle_traits = 5
		}
	}
	
	immediate = {
		random_list = {
			1 = { set_flag = dr_slothful trigger = { NOT = { trait = dr_slothful } } }
			1 = { set_flag = dr_wroth trigger = { NOT = { trait = dr_wroth } } }
			1 = { set_flag = dr_patient trigger = { NOT = { trait = dr_patient } } }
			1 = { set_flag = dr_humble trigger = { NOT = { trait = dr_humble } } }
			1 = { set_flag = dr_proud trigger = { NOT = { trait = dr_proud } } }
			1 = { set_flag = dr_friendly trigger = { NOT = { trait = dr_friendly } } }
		}
	}
	
	option = {
		name = EVTOPTAdragon215
		
		ROOT = {
			show_scope_change = no
			trigger_switch = {
				on_trigger = has_character_flag
				dr_slothful = { add_trait = dr_slothful }
				dr_wroth = { add_trait = dr_wroth }
				dr_patient = { add_trait = dr_patient }
				dr_humble = { add_trait = dr_humble }
				dr_proud = { add_trait = dr_proud }
				dr_friendly = { add_trait = dr_friendly }
			}
		}
	}
	
	after = {
		clr_flag = dr_slothful
		clr_flag = dr_wroth
		clr_flag = dr_patient
		clr_flag = dr_humble
		clr_flag = dr_proud
		clr_flag = dr_friendly
		clr_flag = dragon_is_marked_for_personality_event
	}
}

#	Kill the dragon - You finally face the beast with your dragon
character_event = {
	id = dragon.216
	desc = EVTDESCBdragon216
	picture = GFX_evt_dragon_knight_duel
	#border = GFX_event_normal_frame_martial

	is_triggered_only = yes
	
	immediate = {
		random_friend = {
			limit = { is_tamed_dragon = yes }
			save_event_target_as = my_dragon
		}
		event_target:targetted_dragon_for_taming = {
			random_list = {
				50 = {
					ROOT = { set_flag = kills_dragon }
					modifier = {
						factor = 3
						culture_group = valyrian
					}
					
					additive_modifier = {
						value = 5
						ROOT = { trait = trained_dragon_rider }
					}
					additive_modifier = {
						value = 10
						ROOT = { trait = skilled_dragon_rider }
					}
					additive_modifier = {
						value = 15
						ROOT = { trait = master_dragon_rider }
					}
					additive_modifier = {
						value = 25
						event_target:my_dragon = { check_variable = { which = dragon_strenght_var which = PREV } }
					}
					additive_modifier = {
						value = -25
						event_target:my_dragon = { NOT = { check_variable = { which = dragon_strenght_var which = PREV } } }
					}
				}
				50 = {
					set_flag = killed_by_dragon
				}
			}
		}
	}
	
	option = {
		name = EVTOPTAdragon216
		
		character_event = { id = dragon.210 }
	}
	
	option = {
		name = EVTOPTBdragon216
	}
}

####Dragon duel events

#	Find dragon riders | max. 6 | Team A is A, B, C  Team B is D, E, F
character_event = {
	id = dragon.300
	
	desc = "DEBUG"
	
	is_triggered_only = yes
	
	hide_window = yes
	
	immediate = {
		
		#### TEAM A ####
		
		set_flag = is_rider_in_dragon_duel
		set_flag = is_rider_in_team_a
		set_flag = is_leader_team_a
		save_event_target_as = leader_a
		dragon_riding_skill_calculation = yes
		event_target:leader_a = { change_variable = { which = duel_strength_team_a which = riding_skill_var } }
		character_event = { id = dragon.305 days = 1}
		any_friend = {
			limit = {
				is_tamed_dragon = yes
			}
			dragon_stat_calculation = yes
			set_flag = is_dragon_in_dragon_duel
			set_flag = is_dragon_in_team_a
			save_event_target_as = dragon_a
			change_variable = { which = duel_strength_team_a which = dragon_strenght_var }
			ROOT = { change_variable = { which = duel_strength_team_a which = PREV } }
		}
		
		any_character = {
			limit = {
				trait = dragon_rider
				at_location = ROOT
				in_command = yes
				in_battle = yes
				is_dragon_rider = yes
				NOT = { war_with = ROOT }
				NOT = { is_rider_in_dragon_duel = yes }
			}
			dragon_riding_skill_calculation = yes
			set_flag = is_rider_in_dragon_duel
			set_flag = is_rider_in_team_a
			character_event = { id = dragon.301 }
			any_friend = {
				limit = {
					is_tamed_dragon = yes
				}
				dragon_stat_calculation = yes
				set_flag = is_dragon_in_dragon_duel
				set_flag = is_dragon_in_team_a
			}
		}
		
		#### TEAM B ####

		any_character = {
			limit = {
				trait = dragon_rider
				at_location = ROOT
				in_command = yes
				in_battle = yes
				is_dragon_rider = yes
				war_with = ROOT
				NOT = { is_rider_in_dragon_duel = yes }
			}
			dragon_riding_skill_calculation = yes
			set_flag = is_rider_in_dragon_duel
			set_flag = is_rider_in_team_b
			any_friend = {
				limit = {
					is_tamed_dragon = yes
				}
				dragon_stat_calculation = yes
				set_flag = is_dragon_in_dragon_duel
				set_flag = is_dragon_in_team_b
			}
		}
		
		################################################
		
		random_character = {
			limit = {
				is_rider_in_dragon_duel = yes
			}
			preferred_limit = {
				tier = EMPEROR
			}
			preferred_limit = {
				tier = KING
			}
			preferred_limit = {
				tier = DUKE
			}
			preferred_limit = {
				tier = COUNT
			}
			set_flag = is_leader_team_b
			save_event_target_as = leader_b
			character_event = { id = dragon.302 }
			dragon_riding_skill_calculation = yes
			change_variable = { which = duel_strength_team_b which = riding_skill_var }
		}
		
		if = {
			limit = { has_game_rule = { name = dragon_duels value = enabled_debugging } }
			character_event = { id = dragon.3001 }
		}
	}
	
	option = { }
}

#	DEBUG: Various debug infos
character_event = {
	id = dragon.3001
	desc = "DEBUG"
	
	is_triggered_only = yes
	
	option = {
		name = "Team A: [duel_strength_team_a.GetValue] | Team B: [duel_strength_team_b.GetValue]"
	}
	
	option = {
		name = "Riders:"
		any_character = {
			limit = {
				is_rider_in_dragon_duel = yes
				at_location = ROOT
			}
			tooltip = { show_portrait = yes }
		}
	}
	
	option = {
		name = "Dragons:"
		any_character = {
			limit = { is_dragon_in_dragon_duel = yes }
			tooltip = { show_portrait = yes }
		}
	}
}

#	Other riders of team A are asked to join
character_event = {
	id = dragon.301
	desc = EVTDESCdragon301
	
	is_triggered_only = yes
	
	immediate = {
		
	}
	
	option = {
		name = "I will join [From.GetDynName]"
		
		set_flag = joins_team_a
		event_target:leader_a = { change_variable = { which = num_team_a value = 1 } }
		calculate_team_strengths = yes
	}
	
	option = {
		name = "Flee"
	
		trigger = {
			always = no
		}
	}
}

#	Rider D spots Rider A in the air
character_event = {
	id = dragon.302
	desc = EVTDESCdragon302
	
	is_triggered_only = yes
	
	immediate = {
		
	}
	
	option = {
		name = "What a fool. He is as good as dead!"
		
		any_character = {
			limit = { has_flag = is_rider_in_team_b }
			character_event = { id = dragon.303 }
		}
		event_target:leader_a = { character_event = { id = dragon.304 } }
	}
	
	option = {
		name = "Flee"
	
		trigger = {
			always = no
		}
	}
}

#	Other riders of team B are asked to join
letter_event = {
	id = dragon.303
	desc = EVTDESCdragon303
	
	is_triggered_only = yes
	
	trigger = {
	}
	
	immediate = {
	}
	
	option = {
		name = "I will fight!"
		
		set_flag = joins_team_b
		event_target:leader_a = { change_variable = { which = num_team_b value = 1 } }
		calculate_team_strengths = yes
	}
	
	option = {
		name = "Flee"
	
		trigger = {
			always = no
		}
	}
}

#	Leader A is notified about leader B's actions
letter_event = {
	id = dragon.304
	desc = {
		trigger = { check_variable = { which = num_team_a value = 2 } }
		text = EVTDESCAdragon304
	}
	desc = {
		trigger = { is_variable_equal = { which = num_team_a value = 1 } }
		text = EVTDESCBdragon304
	}
	
	is_triggered_only = yes
	
	option = {
		name = "He won't stand a chance!"
		any_character = {
			limit = {
				has_flag = is_rider_in_team_a
				NOT = { has_flag = is_leader_team_a }
			}
			character_event = { id = dragon.301 }
		}
	}
}

#	Leaders of team A and B are notified about riders who join them
letter_event = {
	id = dragon.305
	desc = EVTDESCdragon305
	
	is_triggered_only = yes
	
	major = yes
	
	major_trigger = {
		is_rider_in_dragon_duel = yes
	}
	
	immediate = {
	}
	
	option = {
		name = "Your allies:"

		any_character = {
			limit = {
				has_flag = joins_team_a
				at_location = ROOT
			}
			show_portrait = yes
			custom_tooltip = { text = "joins as you ally!" }
		}
	}
	
	option = {
		name = "The enemy riders:"
		
		any_character = {
			limit = {
				has_flag = joins_team_b
				at_location = ROOT
			}
			show_portrait = yes
			custom_tooltip = { text = "joins the enemy!" }
		}
	}
	
	option = {
		name = "Flee"
	
		trigger = {
			always = no
		}
	}
	
	after = {
		#Only for debugging
		if = {
			limit = {
				has_flag = is_leader_team_a
				has_game_rule = { name = dragon_duels value = enabled_debugging }
			}
			#character_event = { id = dragon.3001 }
			character_event = { id = dragon.306 }
		}
	}
}

#	Calculates outcome | Displays all riders and dragons
character_event = {
	id = dragon.306
	
	is_triggered_only = yes
	
	hide_window = yes
	
	immediate = {
		if = {
			limit = {
				any_character = {
					is_rider_in_dragon_duel = yes
					is_valid_dragon_duel_target = yes
				}
			}
			any_character = {
				limit = { is_rider_in_dragon_duel = yes }
				calculate_team_strengths = yes
			}
			
			#if = {
			#	limit = { event_target:leader_b = { always = no } }
				random_character = {
					limit = {
						is_rider_in_dragon_duel = yes
						has_flag = is_leader_team_b
					}
					save_event_target_as = leader_b
				}
			#}
			
			change_variable = { which = num_rounds value = 1 }
			
			if = {
				limit = {
					is_first_round_or_team_a_won = yes
				}
				character_event = { id = dragon.3061 }
			}
			else_if = {
				limit = {
					has_flag = team_b_won
				}
				event_target:leader_b = { character_event = { id = dragon.3061 } }
			}
			
			#Only for debugging
			if = {
				limit = {
					has_flag = is_leader_team_a
					has_game_rule = { name = dragon_duels value = enabled_debugging }
				}
				character_event = { id = dragon.3001 }
			}
		}
		else = {
			any_character = {
				limit = {
					is_valid_dragon_duel_target = yes
					is_rider_in_dragon_duel = yes
				}
				character_event = { id = dragon.310 }
			}
		}
	}
	
	option = { }
}

#	Ping event to get encounter
character_event = {
	id = dragon.3061
	
	is_triggered_only = yes
	
	hide_window = yes
	
	option = {
		if = {
			limit = {
				has_flag = is_rider_in_team_a
				is_first_round_or_team_a_won = yes
			}
			random_character = {
				limit = {
					has_flag = is_rider_in_team_b
					is_rider_in_dragon_duel = yes
					NOT = { has_flag = is_picked_as_encounter }
				}
				set_flag = is_picked_as_encounter
				set_flag = is_encounter_of_@ROOT
				ROOT = {
					set_flag = is_picked_as_encounter
					set_flag = is_encounter_of_@PREV
				}
				random_friend = {
					limit = { is_dragon_in_dragon_duel = yes }
					ROOT = {
						random_friend = {
							limit = { is_dragon_in_dragon_duel = yes }
							set_flag = is_picked_as_encounter
							set_flag = is_encounter_of_@PREVPREV
							random_character = {
								limit = { has_flag = is_encounter_of_@ROOT }
								random_friend = {
									limit = { is_dragon_in_dragon_duel = yes }
									set_flag = is_picked_as_encounter
									set_flag = is_encounter_of_@PREVPREV
								}
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_character = {
						has_flag = is_rider_in_team_a
						is_rider_in_dragon_duel = yes
						NOT = { has_flag = is_picked_as_encounter }
					}
				}
				random_character = {
					limit = {
						has_flag = is_rider_in_team_a
						is_rider_in_dragon_duel = yes
						NOT = { has_flag = is_picked_as_encounter }
					}
					character_event = { id = dragon.3061 }
				}
			}
			else = {
				any_character = {
					limit = { is_rider_in_dragon_duel = yes }
					character_event = { id = dragon.307 }
				}
			}
		}
		else_if = {
			limit = {
				has_flag = is_rider_in_team_b
				event_target:leader_a = { has_flag = team_b_won }
			}
			random_character = {
				limit = {
					has_flag = is_rider_in_team_a
					is_rider_in_dragon_duel = yes
					NOT = { has_flag = is_picked_as_encounter }
				}
				set_flag = is_picked_as_encounter
				set_flag = is_encounter_of_@ROOT
				ROOT = {
					set_flag = is_picked_as_encounter
					set_flag = is_encounter_of_@PREV
				}
				random_friend = {
					limit = { is_dragon_in_dragon_duel = yes }
					ROOT = {
						random_friend = {
							limit = { is_dragon_in_dragon_duel = yes }
							set_flag = is_picked_as_encounter
							set_flag = is_encounter_of_@PREVPREV
							random_character = {
								limit = { has_flag = is_encounter_of_@ROOT }
								random_friend = {
									limit = { is_dragon_in_dragon_duel = yes }
									set_flag = is_picked_as_encounter
									set_flag = is_encounter_of_@PREVPREV
								}
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_character = {
						has_flag = is_rider_in_team_b
						is_rider_in_dragon_duel = yes
						NOT = { has_flag = is_picked_as_encounter }
					}
				}
				random_character = {
					limit = {
						has_flag = is_rider_in_team_b
						is_rider_in_dragon_duel = yes
						NOT = { has_flag = is_picked_as_encounter }
					}
					character_event = { id = dragon.3061 }
				}
			}
			else = {
				any_character = {
					limit = { is_rider_in_dragon_duel = yes }
					character_event = { id = dragon.307 }
				}
			}
		}
	}
}

#	The duel begins
character_event = {
	id = dragon.307
	
	desc = {
		trigger = {
			is_first_round_or_team_a_won = yes
		}
		text = EVTDESCAdragon307
	}
	
	desc = {
		trigger = {
			event_target:leader_a = { has_flag = team_b_won }
		}
		text = EVTDESCBdragon307
	}
	
	is_triggered_only = yes
	
	immediate = {
		random_character = {
			limit = { has_flag = is_encounter_of_@ROOT }
			random_friend = {
				limit = { is_rider_in_dragon_duel = yes }
				random_character = {
					limit = { has_flag = is_encounter_of_@PREV }
					calculate_injury_outcome_dragon_duel = yes
				}
			}
		}
			
		calculate_injury_outcome_dragon_duel = yes
		
		weird_outcome_fixes = yes
	}
	
	option = {
		name = EVTOPTAdragon307
		
		if = {
			limit = { has_flag = is_rider_in_team_a }
			random_friend = {
				limit = { is_dragon_in_dragon_duel = yes }
				character_event = { id = dragon.3071 }
			}
		}
	}
	
	option = {
		name = EVTOPTBdragon307
	
		trigger = {
			always = no
		}
	}
}

#	Ping event to get rider's dragon
character_event = {
	id = dragon.3071
	
	is_triggered_only = yes
	
	hide_window = yes
	
	immediate = {
		if = {
			limit = { FROM = { has_flag = is_leader_team_a } }
			FROM = { set_flag = EVT3071 }
		}
		if = {
			limit = {
				any_character = { has_flag = is_encounter_of_@FROM }
			}
			random_character = {
				limit = { has_flag = is_encounter_of_@FROM }
				character_event = { id = dragon.3072 }
			}
		}
		else = {
			FROM = {
				character_event = { id = dragon.308 }
			}
		}
	}
}

#	Ping event to get encounter
character_event = {
	id = dragon.3072
	
	is_triggered_only = yes
	
	hide_window = yes
	
	immediate = {
		if = {
			limit = { FROMFROM = { has_flag = is_leader_team_a } }
			FROMFROM = { set_flag = EVT3072 }
		}
		random_friend = {
			limit = { is_dragon_in_dragon_duel = yes }
			character_event = { id = dragon.3073 }
		}
	}
}

#	Ping event to get encounter's dragon
character_event = {
	id = dragon.3073
	
	is_triggered_only = yes
	
	hide_window = yes
	
	immediate = {
		if = {
			limit = { FROMFROMFROM = { has_flag = is_leader_team_a } }
			FROMFROMFROM = { set_flag = EVT3073 }
		}
		FROMFROMFROM = {
			character_event = { id = dragon.308 }
		}
	}
}

#	The Wound/Maim/Kill event | FROM is encounter's dragon, FROMFROM is encounter, FROMFROMFROM is rider's dragon, THIS is encounter, ROOT is rider
character_event = {
	id = dragon.308
	desc = EVTDESAdragon308
	
	picture = {
		trigger = {
			has_flag = gets_killed
		}
		picture = GFX_evt_dragon_duel_dragon_dies
	}
	
	desc = { #	Get wounded | Rider
		trigger = {
			has_flag = gets_wounded
		}
		text = EVTDESCB1dragon308
	}
	desc = { #	Get wounded | Dragon
		trigger = {
			any_friend = {
				is_dragon_in_dragon_duel = yes
				has_flag = gets_wounded
			}
			NOT = { has_flag = gets_wounded }
		}
		text = EVTDESCB2dragon308
	}
	
	desc = { #	Get maimed | Rider
		trigger = {
			has_flag = gets_maimed
		}
		text = EVTDESCC1dragon308
	}
	desc = { #	Get maimed | Dragon
		trigger = {
			any_friend = {
				is_dragon_in_dragon_duel = yes
				has_flag = gets_maimed
			}
			NOT = { has_flag = gets_maimed }
		}
		text = EVTDESCC2dragon308
	}
	
	desc = { #	Get killed | Rider
		trigger = {
			has_flag = gets_killed
		}
		text = EVTDESCD1dragon308
	}
	desc = { #	Get killed | Dragon
		trigger = {
			any_friend = {
				is_dragon_in_dragon_duel = yes
				has_flag = gets_killed
			}
			NOT = { has_flag = gets_killed }
		}
		text = EVTDESCD2dragon308
	}
	
	show_from_from = yes
	
	major = yes
	
	major_trigger = {
		has_flag = is_encounter_of_@ROOT
	}
	
	is_triggered_only = yes
	
	immediate = {
	}
	
	option = {
		name = EVTOPTAdragon308
		
		name = { #	Get wounded
			trigger = {
				OR = {
					has_flag = gets_wounded
					any_friend = {
						is_dragon_in_dragon_duel = yes
						has_flag = gets_wounded
					}
				}
			}
			text = EVTOPTBdragon308
		}
		name = { #	Get maimed
			trigger = {
				OR = {
					has_flag = gets_maimed
					any_friend = {
						is_dragon_in_dragon_duel = yes
						has_flag = gets_maimed
					}
				}
			}
			text = EVTOPTCdragon308
		}
		name = { #	Get killed
			trigger = {
				OR = {
					has_flag = gets_killed
					any_friend = {
						is_dragon_in_dragon_duel = yes
						has_flag = gets_killed
					}
				}
			}
			text = EVTOPTDdragon308
		}
		
		##########################################################
		
		give_outcome_traits_or_kill = yes
		
		any_friend = {
			limit = {
				is_dragon_in_dragon_duel = yes
			}
			give_outcome_traits_or_kill = yes
		}
		
		clear_outcome_flags_dragon_duel = yes
		
		any_friend = {
			limit = {
				is_dragon_in_dragon_duel = yes
			}
			clear_outcome_flags_dragon_duel = yes
		}
		
		if = {
			limit = { has_flag = is_leader_team_a }
			character_event = { id = dragon.309 }
		}
	}
}

#	Calculates winner of round
character_event = {
	id = dragon.309
	
	is_triggered_only = yes
	
	hide_window = yes
	
	option = {
		random_list = {
			50 = { # Team A wins
				change_variable = { which = vict_team_a value = 1 }
				set_flag = team_a_won
				clr_flag = team_b_won
				modifier = {
					factor = 2
					check_variable = { which = duel_strength_team_a value < 600 }
					check_variable = { which = duel_strength_team_a value >= 550 }
				}
				modifier = {
					factor = 1.9
					check_variable = { which = duel_strength_team_a value < 550 }
					check_variable = { which = duel_strength_team_a value >= 500 }
				}
				modifier = {
					factor = 1.8
					check_variable = { which = duel_strength_team_a value < 500 }
					check_variable = { which = duel_strength_team_a value >= 450 }
				}
				modifier = {
					factor = 1.7
					check_variable = { which = duel_strength_team_a value < 450 }
					check_variable = { which = duel_strength_team_a value >= 400 }
				}
				modifier = {
					factor = 1.6
					check_variable = { which = duel_strength_team_a value < 400 }
					check_variable = { which = duel_strength_team_a value >= 350 }
				}
				modifier = {
					factor = 1.5
					check_variable = { which = duel_strength_team_a value < 350 }
					check_variable = { which = duel_strength_team_a value >= 300 }
				}
				modifier = {
					factor = 1.4
					check_variable = { which = duel_strength_team_a value < 300 }
					check_variable = { which = duel_strength_team_a value >= 250 }
				}
				modifier = {
					factor = 1.3
					check_variable = { which = duel_strength_team_a value < 250 }
					check_variable = { which = duel_strength_team_a value >= 200 }
				}
				modifier = {
					factor = 1.2
					check_variable = { which = duel_strength_team_a value < 200 }
					check_variable = { which = duel_strength_team_a value >= 550 }
				}
				modifier = {
					factor = 1.1
					check_variable = { which = duel_strength_team_a value < 150 }
					check_variable = { which = duel_strength_team_a value >= 100 }
				}
				modifier = {
					factor = 1
					check_variable = { which = duel_strength_team_a value < 100 }
					check_variable = { which = duel_strength_team_a value >= 50 }
				}
				modifier = {
					factor = 0.9
					check_variable = { which = duel_strength_team_a value > 50 }
					check_variable = { which = duel_strength_team_a value > 1 }
				}
			}
			50 = { # Team B wins
				change_variable = { which = vict_team_b value = 1 }
				set_flag = team_b_won
				clr_flag = team_a_won
				modifier = {
					factor = 2
					check_variable = { which = duel_strength_team_b value < 600 }
					check_variable = { which = duel_strength_team_b value >= 550 }
				}
				modifier = {
					factor = 1.9
					check_variable = { which = duel_strength_team_b value < 550 }
					check_variable = { which = duel_strength_team_b value >= 500 }
				}
				modifier = {
					factor = 1.8
					check_variable = { which = duel_strength_team_b value < 500 }
					check_variable = { which = duel_strength_team_b value >= 450 }
				}
				modifier = {
					factor = 1.7
					check_variable = { which = duel_strength_team_b value < 450 }
					check_variable = { which = duel_strength_team_b value >= 400 }
				}
				modifier = {
					factor = 1.6
					check_variable = { which = duel_strength_team_b value < 400 }
					check_variable = { which = duel_strength_team_b value >= 350 }
				}
				modifier = {
					factor = 1.5
					check_variable = { which = duel_strength_team_b value < 350 }
					check_variable = { which = duel_strength_team_b value >= 300 }
				}
				modifier = {
					factor = 1.4
					check_variable = { which = duel_strength_team_b value < 300 }
					check_variable = { which = duel_strength_team_b value >= 250 }
				}
				modifier = {
					factor = 1.3
					check_variable = { which = duel_strength_team_b value < 250 }
					check_variable = { which = duel_strength_team_b value >= 200 }
				}
				modifier = {
					factor = 1.2
					check_variable = { which = duel_strength_team_b value < 200 }
					check_variable = { which = duel_strength_team_b value >= 550 }
				}
				modifier = {
					factor = 1.1
					check_variable = { which = duel_strength_team_b value < 150 }
					check_variable = { which = duel_strength_team_b value >= 100 }
				}
				modifier = {
					factor = 1
					check_variable = { which = duel_strength_team_b value < 100 }
					check_variable = { which = duel_strength_team_b value >= 50 }
				}
				modifier = {
					factor = 0.9
					check_variable = { which = duel_strength_team_b value > 50 }
					check_variable = { which = duel_strength_team_b value > 1 }
				}
			}
		}
		
		set_variable = { which = ta which = vict_team_a }
		set_variable = { which = tb which = vict_team_b }
		subtract_variable = { which = ta which = tb }
		if = {
			limit = { check_variable = { which = vict_team_a which = vict_team_b } }
			subtract_variable = { which = ta which = tb }
			if = {
				limit = {
					check_variable = { which = ta value = 3 }
				}
				set_flag = team_a_wins
				any_character = {
					limit = { is_rider_in_dragon_duel = yes }
					character_event = { id = dragon.310 } # End the duel
				}
			}
			else = {
				any_character = {
					limit = { is_rider_in_dragon_duel = yes }
					set_variable = { which = duel_strength_team_a value = 0 }
					set_variable = { which = duel_strength_team_b value = 0 }
					calculate_team_strengths = yes
				}
				set_flag = EVT309to306a
				character_event = { id = dragon.306 }
			}
		}
		else_if = {
			limit = { check_variable = { which = vict_team_b which = vict_team_a } }
			if = {
				limit = {
					check_variable = { which = tb value = 3 }
				}
				set_flag = team_b_wins
				any_character = {
					limit = { is_rider_in_dragon_duel = yes }
					character_event = { id = dragon.310 } # End the duel
				}
			}
			else = {
				any_character = {
					limit = { is_rider_in_dragon_duel = yes }
					set_variable = { which = duel_strength_team_a value = 0 }
					set_variable = { which = duel_strength_team_b value = 0 }
					calculate_team_strengths = yes
				}
				set_flag = EVT309to306b
				character_event = { id = dragon.306 }
			}
		}
	}
}

#	End of dragon duel
character_event = {
	id = dragon.310
	desc = { #	Team wins
		trigger = {
			OR = {
				AND = {
					has_flag = is_rider_in_team_a
					event_target:leader_a = { has_flag = team_a_wins }
				}
				AND = {
					has_flag = is_rider_in_team_b
					event_target:leader_a = { has_flag = team_b_wins }
				}
			}
		}
		text = EVTDESCAdragon310
	}
	desc = { #	Team loses
		trigger = {
			OR = {
				AND = {
					has_flag = is_rider_in_team_a
					event_target:leader_a = { has_flag = team_b_wins }
				}
				AND = {
					has_flag = is_rider_in_team_b
					event_target:leader_a = { has_flag = team_a_wins }
				}
			}
		}
		text = EVTDESCBdragon310
	}
	
	is_triggered_only = yes
	
	immediate = {
	}
	
	option = {
		name = EVTOPTAdragon310
		
		#Leveling for dragon riders
		if = {
			limit = {
				NOR = {
					is_variable_equal = { which = dragon_duel_count value = 3 }
					is_variable_equal = { which = dragon_duel_count value = 7 }
					is_variable_equal = { which = dragon_duel_count value = 12 }
				}
			}
			custom_tooltip = {
				text = CUSTOM_DRAGON_310
				change_variable = { which = dragon_duel_count value = 1 }
			}
		}
		
		dragon_rider_leveling = yes
		
		#
		
		#Manages Team A
		if = {
			limit = {
				event_target:leader_a = { has_flag = team_a_wins }
				is_in_dragon_duel_team_a = yes
			}
			prestige = 50
			if = {
				limit = { has_flag = is_leader_team_a }
				character_event = { id = dragon.100 }
			}
		}
		else_if = {
			limit = {
				event_target:leader_a = { has_flag = team_b_wins }
				is_rider_in_dragon_duel = yes
				has_flag = is_rider_in_team_b
			}
			if = {
				limit = { has_flag = is_leader_team_a }
				event_target:leader_b = { character_event = { id = dragon.100 } }
			}
			prestige = -50
		}
		#Manages Team B
		else_if = {
			limit = {
				event_target:leader_a = { has_flag = team_b_wins }
				is_in_dragon_duel_team_b = yes
			}
			if = {
				limit = { has_flag = is_leader_team_b }
				character_event = { id = dragon.100 }
			}
			prestige = 50
		}
		
		else_if = {
			limit = {
				event_target:leader_a = { has_flag = team_b_wins }
				is_in_dragon_duel_team_a = yes
			}
			if = {
				limit = { has_flag = is_leader_team_b }
				character_event = { id = dragon.100 }
			}
			prestige = -50
		}
		
		#Names killed riders
		if = {
			limit = { event_target:rider_b_per = { death_reason = death_dragon_duel } }
			event_target:rider_b_per = { show_portrait = yes }
			custom_tooltip = { text = CUSTOM_DRAGON_309B }
		}
	}
	
	option = {
		trigger = {
			always = no
		}
		name = EVTOPTBdragon309
	}
}

#	The Wound/Maim/Kill event for rider A and D if one of them stands alone and dies
character_event = {
	id = dragon.311
	desc = EVTDESCdragon311
	
	is_triggered_only = yes
	
	immediate = {
	}
	
	option = {
		name = EVTOPTAdragon311
	}
	
	option = {
		trigger = {
			always = no
		}
		name = EVTOPTBdragon311
	}
}